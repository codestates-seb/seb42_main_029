//QueryDsl -> 무조건 맨 위 => 아래에서는 안먹힘
buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.k5'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'



repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	asciidoctorExtensions

	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.google.code.gson:gson'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
//	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
//	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'mysql:mysql-connector-java:8.0.29'

	//QueryDsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"
}

//tasks.named('test') {
//	outputs.dir snippetsDir
//	useJUnitPlatform()
//}
//
//tasks.named('asciidoctor') {
//	configurations "asciidoctorExtensions"
//	inputs.dir snippetsDir
//	dependsOn test
//}
//
//
//task copyDocument(type: Copy) {
//	dependsOn asciidoctor
//	from file("${asciidoctor.outputDir}")
//	into file("src/main/resources/static/docs")
//}
//
//build {
//	dependsOn copyDocument
//}
//
//bootJar {
//	dependsOn copyDocument
//	from("${asciidoctor.outputDir}") {
//		into 'static/docs'
//	}
//}

//add querydsl
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
//finished

